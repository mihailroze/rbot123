<?php
namespace Commands;

use Core\Bot;
use Utils\Logger;
use Game\Exploration;
use Game\EnergyManager;
use Game\InventoryManager;

class ExploreCommand {
    private $bot;
    private $logger;
    private $exploration;
    private $energyManager;
    private $inventoryManager;
    private $items;

    public function __construct(Bot $bot, Logger $logger) {
        $this->bot = $bot;
        $this->logger = $logger;
        $this->exploration = new Exploration();
        $this->energyManager = new EnergyManager($bot);
        $this->inventoryManager = new InventoryManager($bot);
        $this->items = require __DIR__ . '/../../config/items.php';
    }

    public function handle($message, $chatId, $userId) {
        $currentEnergy = $this->energyManager->getEnergy($userId);
        $requiredEnergy = 10;

        if ($currentEnergy < $requiredEnergy) {
            return "‚ö†Ô∏è <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.</b>\n\n–¢–µ–∫—É—â–∞—è —ç–Ω–µ—Ä–≥–∏—è: {$currentEnergy}/{$this->energyManager->getMaxEnergy()}\n–≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º (1 –æ—á–∫–æ –≤ –º–∏–Ω—É—Ç—É).";
        }

        $this->energyManager->consumeEnergy($userId, $requiredEnergy);

        $result = $this->exploration->explore();
        $response = "<b>üîç {$result['message']}</b>\n\n";

        if (isset($result['loot'])) {
            foreach ($result['loot'] as $item => $info) {
                $itemData = $this->items[$item];

                if ($item == 'exp') {
                    $addResult = $this->inventoryManager->addItem($userId, 'exp', $info['amount']);
                    $response .= "‚ú® –û—á–∫–∏ –æ–ø—ã—Ç–∞: +{$addResult['added']} (–≤—Å–µ–≥–æ: {$addResult['total']})\n";
                } elseif ($itemData['type'] == 'resource') {
                    $addResult = $this->inventoryManager->addItem($userId, $item, $info['amount']);
                    $response .= "üì¶ {$itemData['name']}: +{$addResult['added']} (–≤—Å–µ–≥–æ: {$addResult['total']})\n";
                    if ($addResult['maxReached']) {
                        $response .= "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ (100).\n";
                    }
                } elseif ($itemData['type'] == 'weapon') {
                    $equipResult = $this->inventoryManager->equipWeapon($userId, $item);
                    if ($equipResult['equipped']) {
                        $response .= "üî´ <b>{$equipResult['newWeapon']} –±—ã–ª–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ</b>\n";
                        if ($equipResult['oldWeapon']) {
                            $response .= "üí∞ {$equipResult['oldWeapon']} –±—ã–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {$equipResult['converted']} RustCoins\n";
                        }
                    } else {
                        $response .= "‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ –æ—Ä—É–∂–∏–µ {$itemData['name']}, –Ω–æ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –æ—Ä—É–∂–∏–µ –ª—É—á—à–µ.\n";
                    }
                }
            }
        }

        $updatedEnergy = $this->energyManager->getEnergy($userId);
        $response .= "\nüîã –û—Å—Ç–∞–≤—à–∞—è—Å—è —ç–Ω–µ—Ä–≥–∏—è: {$updatedEnergy}/{$this->energyManager->getMaxEnergy()}";

        $this->logger->log("Player $userId explored and found loot");

        return $response;
    }
}
